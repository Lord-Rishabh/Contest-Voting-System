coco ContestPlatform

state persistent:
    contests []Contest

class Contest:
    field id U64             // Unique identifier for each contest
    field name String        // Name of the contest
    field description String // Description for the contest
    field creator Address           // Contest creator Address
    field entries Map[String]Entry    // Mapping of entryName=>Votes
    field voters Map[Address]Bool   // Explicitly added to see if the user has already voted
    field endTime I64              // Timestamp indicating when the contest ends
    field winner String          // Address of the winning entry's creator (nullable)
    field highestVoted HighestVoted

class Entry:
    field submittedBy Address
    field votes U64

class HighestVoted:
    field entryName String
    field votes U64

////////////////////////
// Mutate Endpoints
///////////////////////

// Note: "!" required as suffix for mutate endpoints

endpoint deployer Init!():
    pass


endpoint invokable CreateContest!(name String, description String, durationInSeconds I64) -> (createdContest Contest):
    var creator = Address(Sender)
    
    // Input Checks
    if(len(name) > 50):
        throw "Name Too Long"
    if(len(description) > 250):
        throw "Description Too Long"
    if(durationInSeconds <= 0 ):
        throw "Invalid duration"
    var lenOfContests U64
    observe contests <- ContestPlatform.State.contests:
        lenOfContests = len(contests)
    var newContest = Contest{
        id: lenOfContests,
        name: name,
        description: description,
        creator: creator,
        endTime: Env.Timestamp() + durationInSeconds,
    }
   
    mutate contests <- ContestPlatform.State.contests:
        contests = append(contests, newContest)
        yield createdContest newContest


endpoint invokable SubmitEntry!(contestId U64, entryName String):
    var submitter = Address(Sender)
    var contest Contest
    observe contests <- ContestPlatform.State.contests:
        contest = contests[contestId]

    if(contest.endTime < Env.Timestamp()):
        throw "Contest has been Ended"    
    if(contest.entries[entryName].submittedBy != Address(0)):
        throw "Entry with this entryName Already Exists"

    mutate contests <- ContestPlatform.State.contests:
        var newEntry = Entry{submittedBy: submitter, votes: 0}
        contests[contestId].entries[entryName] = newEntry


endpoint invokable VoteForEntry!(contestId U64, entryName String):
    var voter Address = Address(Sender)
    var contest Contest
    observe contests <- ContestPlatform.State.contests:
        contest = contests[contestId]

    if(contest.endTime < Env.Timestamp()):
        throw "Contest has been Ended" 
    if(contest.voters[voter]):
        throw "You have already Voted for this Contest"
        
    mutate contests <- ContestPlatform.State.contests:
        contests[contestId].voters[voter] = true
        contests[contestId].entries[entryName].votes += 1
        if(contests[contestId].highestVoted.votes < contests[contestId].entries[entryName].votes) :
            contests[contestId].highestVoted.votes = contests[contestId].entries[entryName].votes
            contests[contestId].highestVoted.entryName = entryName


////////////////////////
// Observe Endpoints
///////////////////////

// Note: No "!" required as suffix for observe endpoints

// Get all contests
endpoint invokable GetContests()->(contests []Contest):
    observe contests <- ContestPlatform.State.contests

endpoint invokable GetParticularContest(contestId U64)->(contest Contest):
    observe contests <- ContestPlatform.State.contests:
        contest = contests[contestId]

endpoint invokable GetWinner(contestId U64)->(entryName String):
    var contest Contest
    observe contests <- ContestPlatform.State.contests:
        contest = contests[contestId]
        if(contest.endTime > Env.Timestamp()):
            throw "Contest has not been Ended"
        entryName = contests[contestId].highestVoted.entryName


